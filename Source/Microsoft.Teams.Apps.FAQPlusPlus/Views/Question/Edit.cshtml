@model Microsoft.Teams.Apps.FAQPlusPlus.Common.Models.QnAQuestionModel;

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Edit</title>
    <style>
        body {
            font-family: "Segoe UI", "Helvetica Neue", "Apple Color Emoji", "Segoe UI Emoji", Helvetica, Arial, sans-serif;
        }

        .main {
            max-width: 400px;
        }

        .form-group {
            margin-bottom: 10px;
        }

        label {
            margin-bottom: .5em;
            font-size: .8em;
        }

        input {
            width: 95%;
            font-size: .8rem;
        }

        .textbox {
            background-color: #f3f2f1;
            color: #252423;
            margin-top: .8rem;
            margin-left: .3rem;
            margin-right: 1.6rem;
            width: calc(100% - 2 * 1.6rem);
            padding: .5rem .5rem .7rem;
            border: none;
        }

        .save {
            width: 25%;
        }
    </style>
</head>
<body>
    <div class="main">
        <form method="POST" id="questionForm" onSubmit="return validateForm()">
            @Html.HiddenFor(model => model.PostedValues.QnaPairId)

            <div class="form-group">
                <div class="col-md-10">
                    <label>*Question</label>
                    <br />
                    @Html.TextBoxFor(model => model.PostedValues.OriginalQuestion, htmlAttributes: new { @class = "ckeditor  textbox", @id = "OrginalQuestion" })
                </div>
            </div>

            <div class="form-group">
                <label>*Description (Markdown supported)</label>
                <br />
                @Html.TextAreaFor(model => model.PostedValues.Description, htmlAttributes: new { @class = "ckeditor  textbox", @id = "Description" })
            </div>
            <hr />
            <b>Optional Fields</b>
            <div class="form-group" style="margin-top: 3px;">
                <label>Title (Markdown supported)</label>
                <br />
                @Html.TextBoxFor(model => model.PostedValues.Title, htmlAttributes: new { @class = "ckeditor  textbox", @id = "Title" })
            </div>

            <div class="form-group">
                <label>Subtitle (Markdown supported)</label>
                <br />
                @Html.TextBoxFor(model => model.PostedValues.Subtitle, htmlAttributes: new { @class = "ckeditor textbox", @id = "Subtitle" })
            </div>

            <div class="form-group">
                <label>Image URL</label>
                <br />
                @Html.TextBoxFor(model => model.PostedValues.ImageUrl, htmlAttributes: new { @class = "ckeditor  textbox", @id = "ImageUrl" })
            </div>

            <div class="form-group">
                <label>Redirection URL</label>
                <br />
                @Html.TextBoxFor(model => model.PostedValues.RedirectionUrl, htmlAttributes: new { @class = "ckeditor  textbox", @id = "RedirectionUrl" })
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="save" />
                </div>
            </div>
        </form>
    </div>
    @*<script src="https://unpkg.com/&#64;microsoft/teams-js&#64;1.3.4/dist/MicrosoftTeams.min.js"></script>*@
    <script src=https://statics.teams.microsoft.com/sdk/v1.5.2/js/MicrosoftTeams.min.js crossorigin="anonymous"></script>
    <script src="/lib/ckeditor/ckeditor.js"></script>
    <script>

        ///////////////////////////////////////////////////////////////////////
        // Get Form

        microsoftTeams.initialize();

        function validateForm() {
            var postedValues = {
                Id: document.forms["questionForm"]["PostedValues.QnaPairId"].value,
                OriginalQuestion: document.forms["questionForm"]["PostedValues.OriginalQuestion"].value,
                UpdatedQuestion: document.forms["questionForm"]["PostedValues.OriginalQuestion"].value,
                Description: editor.getData(),
                Title: document.forms["questionForm"]["PostedValues.Title"] != undefined ? document.forms["questionForm"]["PostedValues.Title"].value : null,
                SubTitle: document.forms["questionForm"]["PostedValues.Subtitle"] != undefined ? document.forms["questionForm"]["PostedValues.Subtitle"].value : null,
                ImageUrl: document.forms["questionForm"]["PostedValues.ImageUrl"] != undefined ? document.forms["questionForm"]["PostedValues.ImageUrl"].value : null,
                RedirectionUrl: document.forms["questionForm"]["PostedValues.RedirectionUrl"] != undefined ? document.forms["questionForm"]["PostedValues.RedirectionUrl"].value : null,

            }
            console.log(postedValues);
            //microsoftTeams.tasks.submitTask(postedValues, "@Model.AppId");
            microsoftTeams.tasks.submitTask(postedValues, "165dc594-e36a-488f-a8ba-20fcebacad86");
            return false;
        }

        ///////////////////////////////////////////////////////////////////////
        // CKEditor Image Upload code

        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload.
                this.loader = loader;
            }

            // Starts the upload process.
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open('POST', '/question/upload', true);
                xhr.responseType = 'json';
            }

            // Initializes XMLHttpRequest listeners.
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve({
                        default: response.url
                    });
                });

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            // Prepares the data and sends the request.
            _sendRequest(file) {
                // Prepare the form data.
                const data = new FormData();

                data.append('upload', file);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Send the request.
                this.xhr.send(data);
            }
        }

        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }

        ///////////////////////////////////////////////////////////////////////
        // CKEditor Code
        // - Customize toolbar for desired functionality

        ClassicEditor
            .create(document.querySelector('#Description'), {

                toolbar: {
                    items: [
                        'heading',
                        '|',
                        'bold',
                        'italic',
                        'link',
                        'bulletedList',
                        'numberedList',
                        '|',
                        'outdent',
                        'indent',
                        '|',
                        'imageUpload',  // Upload actual image
                        'imageInsert',  // Give URL for image
                        'blockQuote',
                        'insertTable',
                        'mediaEmbed',
                        'undo',
                        'redo'
                    ]
                },
                extraPlugins: [MyCustomUploadAdapterPlugin],
                language: 'en',
                image: {
                    toolbar: [
                        'imageTextAlternative',
                        'imageStyle:full',
                        'imageStyle:side'
                    ]
                },
                table: {
                    contentToolbar: [
                        'tableColumn',
                        'tableRow',
                        'mergeTableCells'
                    ]
                },
                licenseKey: '',


            })
            .then(editor => {
                window.editor = editor;
            })
            .catch(error => {
                console.error('Oops, something went wrong!');
                console.error('Please, report the following error on https://github.com/ckeditor/ckeditor5/issues with the build id and the error stack trace:');
                console.warn('Build id: axz2n9ql7rnk-nohdljl880ze');
                console.error(error);
            });

    </script>
</body>
</html>