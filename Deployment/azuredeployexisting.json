{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseResourceName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The base name to use for the resources that will be provisioned."
      }
    },
    "botClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The client ID of the bot Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
      }
    },
    "botClientSecret": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "The client secret of the bot Azure AD app."
      }
    },
    "configAppClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The client ID of the of the configuration Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
      }
    },
    "configAdminUPNList": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Semicolon-delimited list of the user principal names (UPNs) allowed to access the configuration app."
      }
    },
    "appDisplayName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "FAQ Plus",
      "metadata": {
        "description": "The app (and bot) display name."
      }
    },
    "appDescription": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "A friendly FAQ bot that answers questions and connects you to experts.",
      "metadata": {
        "description": "The app (and bot) description."
      }
    },
    "appIconUrl": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "https://raw.githubusercontent.com/akshata29/fisfaqplus/master/Manifest/color.png",
      "metadata": {
        "description": "The link to the icon for the app. It must resolve to a PNG file."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "minLength": 1,
      "maxLength": 36,
      "metadata": {
        "description": "The ID of the tenant to which the app will be deployed."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "existingQnaMaker": {
      "type": "string",
      "metadata": {
        "description": "Existing QnA Maker cognitive service name"
      }
    },
	"existingQnaMakerRg": {
      "type": "string",
      "metadata": {
        "description": "Existing QnA Maker cognitive service resource group"
      }
    },
    "existingSearchService": {
      "type": "string",
      "metadata": {
        "description": "Existing QnA maker search service name"
      }
    },
	"existingSearchServiceRg": {
      "type": "string",
      "metadata": {
        "description": "Existing QnA maker search service name RG"
      }
    },
	"existinghostingPlan": {
      "type": "string",
      "metadata": {
        "description": "Existing App service plan"
      }
    },
	"existinghostingRg": {
      "type": "string",
      "metadata": {
        "description": "Existing App service plan RG"
      }
    },
    "gitRepoUrl": {
      "type": "string",
      "metadata": {
        "description": "The URL to the GitHub repository to deploy."
      },
      "defaultValue": "https://github.com/akshata29/fisfaqplus.git"
    },
    "gitBranch": {
      "type": "string",
      "metadata": {
        "description": "The branch of the GitHub repository to deploy."
      },
      "defaultValue": "main"
    }
  },
  "variables": {
    "botName": "[parameters('baseResourceName')]",
    "botAppName": "[parameters('baseResourceName')]",
    "botAppDomain": "[concat(variables('botAppName'), '.azurewebsites.net')]",
    "botAppUrl": "[concat('https://', variables('botAppDomain'))]",
    "storageAccountName": "[uniquestring(concat(resourceGroup().id, parameters('baseResourceName')))]",
    "botAppInsightsName": "[parameters('baseResourceName')]",
    "functionAppName": "[concat(parameters('baseResourceName'), '-function')]",
    "configAppName": "[concat(parameters('baseResourceName'), '-config')]",
    "configAppUrl": "[concat('https://', variables('configAppName'), '.azurewebsites.net')]",
    "configAppInsightsName": "[concat(parameters('baseResourceName'), '-config')]",
    "qnaMakerAccountName": "[parameters('baseResourceName')]",
    "qnaMakerAppServiceName": "[concat(parameters('baseResourceName'), '-qnamaker')]",
    "qnaMakerAppInsightsName": "[concat(parameters('baseResourceName'), '-qnamaker')]",
	"subscriptionId":"[subscription().subscriptionId]",
    "sharedSkus": [
      "Free",
      "Shared"
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2018-02-01",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('botAppName')]",
      "location": "[parameters('location')]",
      "kind": "app",
      "properties": {
        "name": "[variables('botAppName')]",
        "serverFarmId": "[resourceId(variables('subscriptionId'),parameters('existinghostingRg'),'Microsoft.Web/serverfarms', parameters('existinghostingPlan'))]",
        "enabled": true,
        "reserved": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": false,
          "appSettings": [
            {
              "name": "SITE_ROLE",
              "value": "bot"
            },
            {
              "name": "MicrosoftAppId",
              "value": "[parameters('botClientId')]"
            },
            {
              "name": "MicrosoftAppPassword",
              "value": "[parameters('botClientSecret')]"
            },
            {
              "name": "StorageConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "QnAMakerHostUrl",
              "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('qnaMakerAppServiceName'))).hostNames[0])]"
            },
            {
              "name": "TenantId",
              "value": "[parameters('tenantId')]"
            },
            {
              "name": "AppBaseUri",
              "value": "[concat('https://', variables('botAppDomain'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components/', variables('botAppInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "ScoreThreshold",
              "value": "0.5"
            },
            {
              "name": "SearchServiceName",
              "value": "[parameters('existingSearchService')]"
            },
            {
              "name": "SearchServiceAdminApiKey",
              "value": "[listAdminKeys(resourceId(variables('subscriptionId'),parameters('existingSearchServiceRg'), 'Microsoft.Search/searchServices/', parameters('existingSearchService')), '2015-08-19').primaryKey]"
            },
            {
              "name": "SearchServiceQueryApiKey",
              "value": "[listQueryKeys(resourceId(variables('subscriptionId'),parameters('existingSearchServiceRg'), 'Microsoft.Search/searchServices/', parameters('existingSearchService')), '2015-08-19').value[0].key]"
            },
            {
              "name": "AccessCacheExpiryInDays",
              "value": "5"
            },
            {
              "name": "SearchIndexingIntervalInMinutes",
              "value": "10"
            },
            {
              "name": "QnAMakerSubscriptionKey",
              "value": "[listKeys(resourceId(variables('subscriptionId'), parameters('existingQnaMakerRg'), 'Microsoft.CognitiveServices/accounts/', parameters('existingQnaMaker')), '2017-04-18').key1]"
            },
            {
              "name": "QnAMakerApiEndpointUrl",
              "value": "https://northeurope.api.cognitive.microsoft.com"
            },
            {
              "name": "ApplicationInsightsLogLevel",
              "value": "Information"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Web/sites', variables('qnaMakerAppServiceName'))]",
        "[resourceId('Microsoft.Insights/components/', variables('botAppInsightsName'))]"
      ],
      "resources": [
        {
          "apiVersion": "2016-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "condition": "[not(empty(parameters('gitRepoUrl')))]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('botAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('gitRepoUrl')]",
            "branch": "[parameters('gitBranch')]",
            "IsManualIntegration": true
          }
        }
      ]
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('botAppInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botAppName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest"
      }
    },
    {
      "apiVersion": "2018-07-12",
      "name": "[variables('botName')]",
      "type": "Microsoft.BotService/botServices",
      "location": "global",
      "sku": {
        "name": "F0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('botName'))]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "kind": "sdk",
      "properties": {
        "displayName": "[parameters('appDisplayName')]",
        "description": "[parameters('appDescription')]",
        "iconUrl": "[parameters('appIconUrl')]",
        "msaAppId": "[parameters('botClientId')]",
        "endpoint": "[concat(variables('botAppUrl'), '/api/messages')]",
        "developerAppInsightKey": "[reference(resourceId('Microsoft.Insights/components', variables('botAppInsightsName')), '2015-05-01').InstrumentationKey]"
      },
      "resources": [
        {
          "name": "[concat(variables('botName'), '/MsTeamsChannel')]",
          "type": "Microsoft.BotService/botServices/channels",
          "apiVersion": "2018-07-12",
          "location": "global",
          "sku": {
            "name": "F0"
          },
          "properties": {
            "channelName": "MsTeamsChannel",
            "location": "global",
            "properties": {
              "isEnabled": true
            }
          },
          "dependsOn": [
            "[concat('Microsoft.BotService/botServices/', variables('botName'))]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2016-08-01",
      "name": "[variables('configAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components/', variables('configAppInsightsName'))]"
      ],
      "kind": "app",
      "properties": {
        "name": "[variables('configAppName')]",
        "serverFarmId": "[resourceId(variables('subscriptionId'), parameters('existinghostingRg'), 'Microsoft.Web/serverfarms', parameters('existinghostingPlan'))]",
        "enabled": true,
        "reserved": false,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": false,
          "appSettings": [
            {
              "name": "SITE_ROLE",
              "value": "configuration"
            },
            {
              "name": "StorageConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "QnAMakerApiEndpointUrl",
              "value": "[reference(resourceId(variables('subscriptionId'), parameters('existingQnaMakerRg'), 'Microsoft.CognitiveServices/accounts/', parameters('existingQnaMaker')), '2017-04-18').endpoint]"
            },
            {
              "name": "QnAMakerSubscriptionKey",
			  "value": "[listKeys(resourceId(variables('subscriptionId'), parameters('existingQnaMakerRg'), 'Microsoft.CognitiveServices/accounts/', parameters('existingQnaMaker')), '2017-04-18').key1]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components/', variables('configAppInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "ida:AADInstance",
              "value": "https://login.microsoftonline.com/"
            },
            {
              "name": "ida:ClientId",
              "value": "[parameters('configAppClientId')]"
            },
            {
              "name": "ida:TenantId",
              "value": "[parameters('tenantId')]"
            },
            {
              "name": "ida:RedirectUri",
              "value": "[variables('configAppUrl')]"
            },
            {
              "name": "ida:PostLogoutRedirectUri",
              "value": "[variables('configAppUrl')]"
            },
            {
              "name": "ValidUpns",
              "value": "[parameters('configAdminUPNList')]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2016-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "condition": "[not(empty(parameters('gitRepoUrl')))]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('configAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('gitRepoUrl')]",
            "branch": "[parameters('gitBranch')]",
            "IsManualIntegration": true
          }
        }
      ]
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('configAppInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('configAppName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2016-08-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "kind": "functionapp",
      "properties": {
        "name": "[variables('functionAppName')]",
		"serverFarmId": "[resourceId(variables('subscriptionId'), parameters('existinghostingRg'), 'Microsoft.Web/serverfarms', parameters('existinghostingPlan'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "PROJECT",
              "value": "Source/Microsoft.Teams.Apps.FAQPlusPlus.AzureFunction/Microsoft.Teams.Apps.FAQPlusPlus.AzureFunction.csproj"
            },
            {
              "name": "SITE_ROLE",
              "value": "function"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "QnAMakerApiUrl",
              "value": "https://northeurope.api.cognitive.microsoft.com"
            },
            {
              "name": "QnAMakerSubscriptionKey",
              "value": "[listKeys(resourceId(variables('subscriptionId'), parameters('existingQnaMakerRg'), 'Microsoft.CognitiveServices/accounts/', parameters('existingQnaMaker')), '2017-04-18').key1]"
            },
            {
              "name": "SearchServiceName",
              "value": "[parameters('existingSearchService')]"
            },
			{
              "name": "SearchServiceAdminApiKey",
              "value": "[listAdminKeys(resourceId(variables('subscriptionId'),parameters('existingSearchServiceRg'), 'Microsoft.Search/searchServices/', parameters('existingSearchService')), '2015-08-19').primaryKey]"
            },
            {
              "name": "SearchServiceQueryApiKey",
              "value": "[listQueryKeys(resourceId(variables('subscriptionId'),parameters('existingSearchServiceRg'), 'Microsoft.Search/searchServices/', parameters('existingSearchService')), '2015-08-19').value[0].key]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "StorageConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "10.14.1"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "sourcecontrols",
          "apiVersion": "2015-08-01",
          "name": "web",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('gitRepoUrl')]",
            "branch": "[parameters('gitBranch')]",
            "IsManualIntegration": true
          },
          "condition": "[not(empty(parameters('gitRepoUrl')))]"
        }
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2016-08-01",
      "name": "[variables('qnaMakerAppServiceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "enabled": true,
        "siteConfig": {
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          }
        },
        "name": "[variables('qnaMakerAppServiceName')]",
        "serverFarmId": "[resourceId(variables('subscriptionId'), parameters('existinghostingRg'), 'Microsoft.Web/serverfarms', parameters('existinghostingPlan'))]",
        "hostingEnvironment": ""
      },
      "tags": {
        "isqnamaker": "true",
        "[concat('hidden-related:', '/subscriptions/', variables('subscriptionId'),'/resourcegroups/', parameters('existinghostingRg'), '/providers/Microsoft.Web/serverfarms/', parameters('existinghostingPlan'))]": "empty"
      },
      "dependsOn": [
      ],
      "resources": [
        {
          "name": "[variables('qnaMakerAppInsightsName')]",
          "type": "microsoft.insights/components",
          "kind": "web",
          "apiVersion": "2015-05-01",
          "location": "[parameters('location')]",
          "tags": {
            "[concat('hidden-link:', resourceId('Microsoft.Web/sites/', variables('qnaMakerAppServiceName')))]": "Resource"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('qnaMakerAppServiceName'))]"
          ],
          "properties": {
            "ApplicationId": "[variables('qnaMakerAppServiceName')]"
          }
        },
        {
          "apiVersion": "2015-08-01",
          "name": "appsettings",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('qnaMakerAppServiceName'))]"
          ],
          "properties": {
            "AzureSearchName": "[parameters('existingSearchService')]",
            "AzureSearchAdminKey": "[listAdminKeys(resourceId(variables('subscriptionId'),parameters('existingSearchServiceRg'), 'Microsoft.Search/searchServices/', parameters('existingSearchService')), '2015-08-19').primaryKey]",
            "UserAppInsightsKey": "[reference(resourceId('Microsoft.Insights/components/', variables('qnaMakerAppInsightsName')), '2015-05-01').InstrumentationKey]",
            "UserAppInsightsName": "[variables('qnaMakerAppInsightsName')]",
            "UserAppInsightsAppId": "[reference(resourceId('Microsoft.Insights/components/', variables('qnaMakerAppInsightsName')), '2015-05-01').AppId]",
            "PrimaryEndpointKey": "[concat(variables('qnaMakerAppServiceName'), '-PrimaryEndpointKey')]",
            "SecondaryEndpointKey": "[concat(variables('qnaMakerAppServiceName'), '-SecondaryEndpointKey')]",
            "DefaultAnswer": "No good match found in KB.",
            "QNAMAKER_EXTENSION_VERSION": "latest"
          }
        }
      ]
    }
  ],
  "outputs": {
    "botId": {
      "type": "string",
      "value": "[parameters('botClientId')]"
    },
    "appDomain": {
      "type": "string",
      "value": "[variables('botAppDomain')]"
    },
    "configurationAppUrl": {
      "type": "string",
      "value": "[variables('configAppUrl')]"
    }
  }
}